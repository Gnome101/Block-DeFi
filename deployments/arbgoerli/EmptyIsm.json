{
  "address": "0x29Eeb75185411Cb86DF29bE25645944761029fE7",
  "abi": [
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moduleType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc465c5ae1441de1c1cbe572003ce116ce800bb9b067632304079daac2267aa7",
  "receipt": {
    "to": null,
    "from": "0x793448209Ef713CAe41437C7DaA219b59BEF1A4A",
    "contractAddress": "0x29Eeb75185411Cb86DF29bE25645944761029fE7",
    "transactionIndex": 1,
    "gasUsed": "152823",
    "logsBloom": "0x
    "blockHash": "0xf8b1c412934eedbeb00bb07ad6a665739fadb64fe1511a5c41ce644bf0baed3d",
    "transactionHash": "0xfc465c5ae1441de1c1cbe572003ce116ce800bb9b067632304079daac2267aa7",
    "logs": [],
    "blockNumber": 49959917,
    "cumulativeGasUsed": "152823",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f96cc989e15f619be1382d8e1088edf3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"moduleType()\":{\"details\":\"Relayers infer how to fetch and format metadata.\"},\"verify(bytes,bytes)\":{\"params\":{\"_message\":\"Hyperlane encoded interchain message\",\"_metadata\":\"Off-chain metadata provided by a relayer, specific to the security model encoded by the module (e.g. validator signatures)\"},\"returns\":{\"_0\":\"True if the message was verified\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"moduleType()\":{\"notice\":\"Returns an enum that represents the type of security model encoded by this ISM.\"},\"verify(bytes,bytes)\":{\"notice\":\"Defines a security model responsible for verifying interchain messages based on the provided metadata.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Facets/Hyperlane/EmptyISM.sol\":\"EmptyIsm\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/Facets/Hyperlane/EmptyISM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\nimport \\\"./Interfaces/IInterchainSecurityModule.sol\\\";\\n\\ncontract EmptyIsm is IInterchainSecurityModule {\\n    //https://docs.uma.xyz/developers/quick-start\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external pure returns (uint8) {\\n        return 6;\\n    }\\n\\n    uint256 public count = 0;\\n\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool) {\\n        count++;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb336be19290b58995846d081496a3a50e58d0b52bcef12eb413d5be92242aa84\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/Facets/Hyperlane/Interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb9662352b2d1ce49d5e06177c8f839ebd0b40408c189e80b1f90c5fcdd85a8ee\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b506101c3806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780636465e69f14610062578063f7e83aee14610071575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b60405160068152602001610059565b61008461007f3660046100fb565b610094565b6040519015158152602001610059565b6000805481806100a383610166565b9091555060019695505050505050565b60008083601f8401126100c557600080fd5b5081356001600160401b038111156100dc57600080fd5b6020830191508360208285010111156100f457600080fd5b9250929050565b6000806000806040858703121561011157600080fd5b84356001600160401b038082111561012857600080fd5b610134888389016100b3565b9096509450602087013591508082111561014d57600080fd5b5061015a878288016100b3565b95989497509550505050565b60006001820161018657634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212204d4886b844c90feff7dae9dd73abf5c2f197437d7f5866650ea58945981a1e8964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780636465e69f14610062578063f7e83aee14610071575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b60405160068152602001610059565b61008461007f3660046100fb565b610094565b6040519015158152602001610059565b6000805481806100a383610166565b9091555060019695505050505050565b60008083601f8401126100c557600080fd5b5081356001600160401b038111156100dc57600080fd5b6020830191508360208285010111156100f457600080fd5b9250929050565b6000806000806040858703121561011157600080fd5b84356001600160401b038082111561012857600080fd5b610134888389016100b3565b9096509450602087013591508082111561014d57600080fd5b5061015a878288016100b3565b95989497509550505050565b60006001820161018657634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212204d4886b844c90feff7dae9dd73abf5c2f197437d7f5866650ea58945981a1e8964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "moduleType()": {
        "details": "Relayers infer how to fetch and format metadata."
      },
      "verify(bytes,bytes)": {
        "params": {
          "_message": "Hyperlane encoded interchain message",
          "_metadata": "Off-chain metadata provided by a relayer, specific to the security model encoded by the module (e.g. validator signatures)"
        },
        "returns": {
          "_0": "True if the message was verified"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "moduleType()": {
        "notice": "Returns an enum that represents the type of security model encoded by this ISM."
      },
      "verify(bytes,bytes)": {
        "notice": "Defines a security model responsible for verifying interchain messages based on the provided metadata."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10942,
        "contract": "contracts/Facets/Hyperlane/EmptyISM.sol:EmptyIsm",
        "label": "count",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}